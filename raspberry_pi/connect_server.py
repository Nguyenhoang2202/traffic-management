import asyncio
import websockets
import json

from camera import Camera
from sensors.rain import RainSensor
from sensors.gps import GPSReader
from devices.traffic_light import traffic_light
from datetime import datetime
from pydantic import BaseModel
from typing import Optional

from dotenv import load_dotenv
import os

# N·∫°p bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
load_dotenv()

# L·∫•y URI
SERVER_URI = os.getenv("SERVER_URI")
async def send_register(ws, device_id, gps: GPSReader):
    
    lat, long = gps.read_coordinates()
    payload = {
        "type": "register",
        "device_id": device_id,
        "gps": {"lat": lat, "long": long}
    }
    await ws.send(json.dumps(payload))
    print("‚úÖ ƒê√£ g·ª≠i th√¥ng tin thi·∫øt b·ªã ban ƒë·∫ßu")

async def send_data(ws, device_id,camera: Camera, rain_sensor: RainSensor, tlight: traffic_light):
    prev_data = {
        "rain": None,
        "mode": None,
        "auto_mode": None,
        "traffic_light": {
            "state": None,
            "remaining_time": None
        }
    }

    while True:
        try:
            image_data = camera.get_latest_frame()
            payload = {
                "type": "data",
                "device_id": device_id,
                "image": image_data
            }

            rain_status = rain_sensor.get_status()
            auto_mode = tlight.auto_mode
            mode = tlight.mode
            current_data = {
                "rain": rain_status,
                "mode": mode,
                "auto_mode": auto_mode,
                "traffic_light": {
                    "state": tlight.state.state,
                    "remaining_time": tlight.get_remaining_time()
                }
            }
            # X·ª¨ L√ù T·ª∞ ƒê·ªòNG MODE THEO RAIN + AUTO
            # if auto_mode == 1:
            #     mode_reset_once = False  # Cho ph√©p reset l·∫ßn sau n·∫øu auto_mode b·ªã t·∫Øt r·ªìi b·∫≠t l·∫°i
            #     if rain_status and mode != 1:
            #         tlight.mode = 1
            #         print(f"üåßÔ∏è M∆∞a ‚Äì Chuy·ªÉn sang mode=1")
            #     elif rain_status and mode != 0:
            #         tlight.mode = 0
            #         print(f"‚òÄÔ∏è Kh√¥ng m∆∞a ‚Äì Chuy·ªÉn v·ªÅ mode=0")
            # elif auto_mode == 0:
            #     if mode == 1 and not mode_reset_once:
            #         tlight.mode = 0
            #         mode_reset_once = True
            #         print(f"üõë Ng∆∞·ªùi d√πng ƒëi·ªÅu khi·ªÉn ‚Äì Tr·∫£ v·ªÅ mode=0 m·ªôt l·∫ßn")

            # So s√°nh v√† ch·ªâ g·ª≠i n·∫øu kh√°c
            for key in ["rain", "mode", "auto_mode"]:
                if current_data[key] != prev_data[key]:
                    payload[key] = current_data[key]
                    prev_data[key] = current_data[key]

            for key in ["state", "remaining_time"]:
                if current_data["traffic_light"][key] != prev_data["traffic_light"][key]:
                    payload.setdefault("traffic_light", {})[key] = current_data["traffic_light"][key]
                    prev_data["traffic_light"][key] = current_data["traffic_light"][key]
            
            payload["datetime"] = datetime.now().isoformat()

            await ws.send(json.dumps(payload))

        except Exception as e:
            print(f"‚ùå L·ªói g·ª≠i d·ªØ li·ªáu: {e}")
            raise e

        await asyncio.sleep(0.041)

class TrafficCommand(BaseModel):            
    mode: Optional[int] = None
    auto_mode: Optional[bool] = None
    green_time: Optional[int] = None
    red_time: Optional[int] = None

async def listen_from_server(ws, tlight: traffic_light):
    while True:
        try:
            message = await ws.recv()
            data = json.loads(message)

            if data["type"] == "command":
                print("received!")
                command = TrafficCommand(**data["data"])

                # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√®n
                if command.mode is not None:
                    tlight.mode = command.mode
                if command.auto_mode is not None:
                    tlight.auto_mode = command.auto_mode
                if command.green_time is not None:
                    tlight.g.time_on = command.green_time
                if command.red_time is not None:
                    tlight.r.time_on = command.red_time

                print("Command received:", command)

        except Exception as e:
            print(f"‚ùå L·ªói khi nh·∫≠n l·ªánh t·ª´ server: {e}")
            break


async def connect_forever(device_id, camera: Camera, rain_sensor: RainSensor, gps: GPSReader, tlight: traffic_light):
    while True:
        try:
            print(f"üîÑ ƒêang c·ªë k·∫øt n·ªëi t·ªõi {SERVER_URI} ...")
            async with websockets.connect(SERVER_URI) as ws:
                print("‚úÖ K·∫øt n·ªëi WebSocket th√†nh c√¥ng!")

                # G·ª≠i ƒëƒÉng k√Ω 1 l·∫ßn
                await send_register(ws, device_id, gps)

                # Ch·ªù x√°c nh·∫≠n t·ª´ server
                response = await ws.recv()
                try:
                    response_data = json.loads(response)
                    if response_data.get("type") == "ack" and response_data.get("status") == "ok":
                        print("üì© Server x√°c nh·∫≠n ƒëƒÉng k√Ω th√†nh c√¥ng. B·∫Øt ƒë·∫ßu g·ª≠i d·ªØ li·ªáu...")
                        send_task = asyncio.create_task(send_data(ws, device_id, camera, rain_sensor, tlight))
                        listen_task = asyncio.create_task(listen_from_server(ws, tlight))

                        # Ch·ªù c·∫£ hai task ho√†n th√†nh
                        await asyncio.gather(send_task, listen_task)
                                                
                    else:
                        print("‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i ho·∫∑c ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá:", response_data)
                        continue  # Quay l·∫°i k·∫øt n·ªëi l·∫°i
                except json.JSONDecodeError:
                    print("‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch ph·∫£n h·ªìi t·ª´ server:", response)
                    continue

        except Exception as e:
            print(f"‚ö†Ô∏è M·∫•t k·∫øt n·ªëi WebSocket: {e}")
            print("‚è≥ Th·ª≠ l·∫°i sau 5 gi√¢y...\n")
            await asyncio.sleep(5)


if __name__ == "__main__":
    print("Ch·∫°y file n√†y t·ª´ main.py ƒë·ªÉ t√≠ch h·ª£p h·ªá th·ªëng.")
